// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
	BigDecimal,
	BigInt,
	Bytes,
	Entity,
	TypedMap,
	Value,
	ValueKind,
	store,
} from "@graphprotocol/graph-ts";

export class Auction extends Entity {
	constructor(id: Bytes) {
		super();
		this.set("id", Value.fromBytes(id));
	}

	save(): void {
		const id = this.get("id");
		assert(id != null, "Cannot save Auction entity without an ID");
		if (id) {
			assert(
				id.kind === ValueKind.BYTES,
				`Entities of type Auction must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
			);
			store.set("Auction", id.toBytes().toHexString(), this);
		}
	}

	static loadInBlock(id: Bytes): Auction | null {
		return changetype<Auction | null>(
			store.get_in_block("Auction", id.toHexString()),
		);
	}

	static load(id: Bytes): Auction | null {
		return changetype<Auction | null>(store.get("Auction", id.toHexString()));
	}

	get id(): Bytes {
		const value = this.get("id");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBytes();
		}
	}

	set id(value: Bytes) {
		this.set("id", Value.fromBytes(value));
	}

	get llama_id(): BigInt {
		const value = this.get("llama_id");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set llama_id(value: BigInt) {
		this.set("llama_id", Value.fromBigInt(value));
	}

	get start_time(): BigInt {
		const value = this.get("start_time");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set start_time(value: BigInt) {
		this.set("start_time", Value.fromBigInt(value));
	}

	get end_time(): BigInt {
		const value = this.get("end_time");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set end_time(value: BigInt) {
		this.set("end_time", Value.fromBigInt(value));
	}

	get total_bids(): BigInt {
		const value = this.get("total_bids");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set total_bids(value: BigInt) {
		this.set("total_bids", Value.fromBigInt(value));
	}

	get amount(): BigInt {
		const value = this.get("amount");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set amount(value: BigInt) {
		this.set("amount", Value.fromBigInt(value));
	}

	get winner(): Bytes {
		const value = this.get("winner");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBytes();
		}
	}

	set winner(value: Bytes) {
		this.set("winner", Value.fromBytes(value));
	}
}

export class CurrentAuction extends Entity {
	constructor(id: Bytes) {
		super();
		this.set("id", Value.fromBytes(id));
	}

	save(): void {
		const id = this.get("id");
		assert(id != null, "Cannot save CurrentAuction entity without an ID");
		if (id) {
			assert(
				id.kind === ValueKind.BYTES,
				`Entities of type CurrentAuction must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
			);
			store.set("CurrentAuction", id.toBytes().toHexString(), this);
		}
	}

	static loadInBlock(id: Bytes): CurrentAuction | null {
		return changetype<CurrentAuction | null>(
			store.get_in_block("CurrentAuction", id.toHexString()),
		);
	}

	static load(id: Bytes): CurrentAuction | null {
		return changetype<CurrentAuction | null>(
			store.get("CurrentAuction", id.toHexString()),
		);
	}

	get id(): Bytes {
		const value = this.get("id");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBytes();
		}
	}

	set id(value: Bytes) {
		this.set("id", Value.fromBytes(value));
	}

	get llama_id(): BigInt {
		const value = this.get("llama_id");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set llama_id(value: BigInt) {
		this.set("llama_id", Value.fromBigInt(value));
	}

	get start_time(): BigInt {
		const value = this.get("start_time");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set start_time(value: BigInt) {
		this.set("start_time", Value.fromBigInt(value));
	}

	get end_time(): BigInt {
		const value = this.get("end_time");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set end_time(value: BigInt) {
		this.set("end_time", Value.fromBigInt(value));
	}

	get total_bids(): BigInt {
		const value = this.get("total_bids");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set total_bids(value: BigInt) {
		this.set("total_bids", Value.fromBigInt(value));
	}

	get winning_bid(): BigInt {
		const value = this.get("winning_bid");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set winning_bid(value: BigInt) {
		this.set("winning_bid", Value.fromBigInt(value));
	}

	get winner(): Bytes {
		const value = this.get("winner");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBytes();
		}
	}

	set winner(value: Bytes) {
		this.set("winner", Value.fromBytes(value));
	}
}

export class AuctionGlobalConfiguration extends Entity {
	constructor(id: Bytes) {
		super();
		this.set("id", Value.fromBytes(id));
	}

	save(): void {
		const id = this.get("id");
		assert(
			id != null,
			"Cannot save AuctionGlobalConfiguration entity without an ID",
		);
		if (id) {
			assert(
				id.kind === ValueKind.BYTES,
				`Entities of type AuctionGlobalConfiguration must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
			);
			store.set("AuctionGlobalConfiguration", id.toBytes().toHexString(), this);
		}
	}

	static loadInBlock(id: Bytes): AuctionGlobalConfiguration | null {
		return changetype<AuctionGlobalConfiguration | null>(
			store.get_in_block("AuctionGlobalConfiguration", id.toHexString()),
		);
	}

	static load(id: Bytes): AuctionGlobalConfiguration | null {
		return changetype<AuctionGlobalConfiguration | null>(
			store.get("AuctionGlobalConfiguration", id.toHexString()),
		);
	}

	get id(): Bytes {
		const value = this.get("id");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBytes();
		}
	}

	set id(value: Bytes) {
		this.set("id", Value.fromBytes(value));
	}

	get min_bid_increment_percentage(): BigInt {
		const value = this.get("min_bid_increment_percentage");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set min_bid_increment_percentage(value: BigInt) {
		this.set("min_bid_increment_percentage", Value.fromBigInt(value));
	}

	get reserve_price(): BigInt {
		const value = this.get("reserve_price");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set reserve_price(value: BigInt) {
		this.set("reserve_price", Value.fromBigInt(value));
	}

	get time_buffer(): BigInt {
		const value = this.get("time_buffer");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set time_buffer(value: BigInt) {
		this.set("time_buffer", Value.fromBigInt(value));
	}

	get duration(): BigInt {
		const value = this.get("duration");
		if (!value || value.kind === ValueKind.NULL) {
			throw new Error("Cannot return null for a required field.");
		} else {
			return value.toBigInt();
		}
	}

	set duration(value: BigInt) {
		this.set("duration", Value.fromBigInt(value));
	}
}
